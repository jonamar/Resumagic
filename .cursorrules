# Resumagic - Resume & Cover Letter Generator

## Overview
Professional document generator using TypeScript/Node.js + Python microservices architecture.

**Technologies**: TypeScript, Node.js, Python 3.8+, Vitest (modern testing), Ollama (optional)
**Build System**: TypeScript compiler with ESNext modules, compiled to dist/ directory

## Repository Structure

**CRITICAL**: Two separate git repositories for privacy:
- `/app/` - Application code (this directory) 
- `/data/` - Private data (canonical, test, applications)

**Application Structure** (3-tier):
```
{company-role}/
├── inputs/     # resume.json, cover-letter.md, keywords.json
├── working/    # analysis, evaluations, intermediate files  
└── outputs/    # final DOCX documents
```

## Key Commands

```bash
# TypeScript Build Process
npx tsc                                          # Compile TypeScript to dist/

# Document generation (compiled)
node dist/generate-resume.js company-role
node dist/generate-resume.js company-role --all       # Full workflow

# Document generation (direct TypeScript - development)
npx ts-node generate-resume.ts company-role
npx ts-node generate-resume.ts company-role --all

# New application setup (recommended)
node dist/generate-resume.js --new-app "Company" "Job Title"
# OR: npx ts-node generate-resume.ts --new-app "Company" "Job Title"

# Development
npm test                                         # Run all tests
node scripts/debug/application-health.js        # Check app health
```

## Architecture & Development

**Service Design**: 
- TypeScript/Node.js: Document generation, CLI, orchestration (under `services/document-generation/`)
- Python: Keyword analysis, TF-IDF scoring
- Clean boundaries, centralized error handling
- ESM modules with .js extensions in TypeScript imports

- Vitest framework (167 tests, ~2x faster than Jest) with 85%+ coverage
- Native ESM support, no experimental flags needed
- Dynamic application discovery (no hardcoded lists)
- Health validation prevents false alarms
- Golden masters in `/data/test/golden-master/`

## Development Guidelines

**Code Quality**:
- Always read files before editing
- Use centralized ErrorHandler class  
- Follow established naming conventions
- Maintain 85%+ test coverage

**Service Integration**:
- Services use `working/` directory for output
- Use async/await patterns
- Handle dependencies gracefully
- Provide clear progress feedback

## Dependencies

**Required**: Node.js, Python 3.8+, npm packages (docx, gray-matter, marked)
**Optional**: Ollama with dolphin3:latest (hiring evaluation)

## Git Workflow
- Code changes: Commit from `/app/`
- Data changes: Commit from `/data/`  
- Never create git repo in root directory

## Key Documentation
- `docs/application-registry.md` - Application health system
- `docs/architecture-overview.md` - System architecture
- `services/keyword-analysis/API.md` - Python service API