# Resumagic - Resume & Cover Letter Generator

## Overview
Professional document generator using Node.js + Python microservices architecture.

**Technologies**: Node.js, Python 3.8+, Jest, Ollama (optional)

## Repository Structure

**CRITICAL**: Two separate git repositories for privacy:
- `/app/` - Application code (this directory) 
- `/data/` - Private data (canonical, test, applications)

**Application Structure** (3-tier):
```
{company-role}/
├── inputs/     # resume.json, cover-letter.md, keywords.json
├── working/    # analysis, evaluations, intermediate files  
└── outputs/    # final DOCX documents
```

## Key Commands

```bash
# Document generation
node generate-resume.js company-role
node generate-resume.js company-role --all       # Full workflow

# New application setup (recommended)
node generate-resume.js --new-app "Company" "Job Title"

# Development
npm test                                         # Run all tests
node scripts/debug/application-health.js        # Check app health
```

## Architecture & Development

**Service Design**: 
- Node.js: Document generation, CLI, orchestration
- Python: Keyword analysis, TF-IDF scoring
- Clean boundaries, centralized error handling

**Testing**:
- Jest framework with 85%+ coverage
- Dynamic application discovery (no hardcoded lists)
- Health validation prevents false alarms
- Golden masters in `/data/test/golden-master/`

## Development Guidelines

**Code Quality**:
- Always read files before editing
- Use centralized ErrorHandler class  
- Follow established naming conventions
- Maintain 85%+ test coverage

**Service Integration**:
- Services use `working/` directory for output
- Use async/await patterns
- Handle dependencies gracefully
- Provide clear progress feedback

## Dependencies

**Required**: Node.js, Python 3.8+, npm packages (docx, gray-matter, marked)
**Optional**: Ollama with dolphin3:latest (hiring evaluation)

## Git Workflow
- Code changes: Commit from `/app/`
- Data changes: Commit from `/data/`  
- Never create git repo in root directory

## Key Documentation
- `docs/application-registry.md` - Application health system
- `docs/architecture-overview.md` - System architecture
- `services/keyword-analysis/API.md` - Python service API