# Resumagic Project Rules

## Overview
Professional resume and cover letter generator with intelligent keyword analysis and hiring simulation.

## Key Technologies
- Node.js (document generation, DOCX creation)
- Python 3.8+ (keyword analysis, TF-IDF scoring)
- Ollama (hiring evaluation service)
- Jest (testing framework)

## Project Structure

### Repository Layout
- `/app/` - Main codebase (this directory)
- `/data/applications/` - Private application data (separate git repo)

### Application Folder Structure (3-tier)
```
{company-role}/
├── inputs/                    # Source materials
│   ├── resume.json           # Structured resume data
│   ├── cover-letter.md       # Markdown cover letter
│   └── keywords.json         # Keywords for analysis
├── working/                  # Process utilities & intermediate files
│   ├── keyword_analysis.json
│   ├── evaluation-results.json
│   └── {candidate}-evaluation.md
└── outputs/                  # Final deliverables
    ├── Jon-Amar-Resume-{Company}.docx
    └── Jon-Amar-Cover-Letter-{Company}.docx
```

## CLI Integration Features

### Core Commands
```bash
# Basic document generation
node generate-resume.js company-role

# Integrated workflows (NEW!)
node generate-resume.js company-role --evaluate  # Documents + hiring evaluation
node generate-resume.js company-role --all       # Complete workflow

# Individual services
python services/keyword-analysis/kw_rank_modular.py company-role
node services/hiring-evaluation/evaluation-runner.js company-role
```

### CLI Flag Integration
- `--evaluate`: Generate documents + run hiring evaluation
- `--all`: Complete workflow (documents + keyword analysis + hiring evaluation)
- Maintains backward compatibility with existing flags
- Service orchestration handled in `generate-resume.js`

## Architecture Guidelines

### Microservice Design
- **Node.js Services**: Document generation, CLI parsing, hiring evaluation
- **Python Services**: Keyword analysis, TF-IDF scoring, semantic clustering
- **Clean Boundaries**: Each service uses optimal technology stack
- **Error Handling**: Centralized error handling with specific service error types

### Code Organization
- `cli-parser.js`: Command-line argument parsing and generation plan determination
- `generate-resume.js`: Main orchestrator for all services
- `services/hiring-evaluation/`: Ollama-based hiring simulation
- `services/keyword-analysis/`: Python-based keyword analysis

### Testing Strategy
- **Unit Tests**: Individual component testing with Jest
- **Integration Tests**: End-to-end workflow testing
- **Coverage**: 85%+ test coverage requirement
- **Real Data Testing**: Use applications in `/data/applications/` for testing

## Development Best Practices

### File Operations
- Always read files before editing
- Use targeted edits, not wholesale rewrites
- Preserve existing content and patterns
- Follow established naming conventions

### Error Handling
- Use centralized ErrorHandler class
- Provide actionable error messages
- Check for common issues (Ollama connection, Python dependencies)
- Fail fast with informative messages

### Service Integration
- Services output to `working/` directory (not `outputs/`)
- Use async/await patterns for service orchestration
- Handle service dependencies gracefully
- Provide clear progress feedback to users

## Dependencies

### Required
- Node.js with npm packages: docx, gray-matter, jszip, marked
- Python 3.8+ with requirements in `services/keyword-analysis/requirements.txt`

### Optional
- Ollama with `dolphin3:latest` model (for hiring evaluation)
- Installation: `curl -fsSL https://ollama.ai/install.sh | sh && ollama pull dolphin3:latest`

## Common Tasks

### Testing
```bash
# Run all tests
npm test

# Test keyword analysis
cd services/keyword-analysis && python run_tests.py --coverage

# Test with real application
node generate-resume.js relay-director-of-product --evaluate
```

### Creating New Applications
```bash
cp -r ../data/applications/template ../data/applications/new-company-role
# Edit inputs/resume.json, inputs/cover-letter.md, inputs/keywords.json
```

### Service Development
- Hiring evaluation: Modify `services/hiring-evaluation/` for persona-based evaluation
- Keyword analysis: Modify `services/keyword-analysis/kw_rank/` for analysis logic
- Document generation: Modify `docx-template.js` for DOCX formatting

## Git Workflow
- Code changes: Commit from `/app/` directory
- Data changes: Commit from `/data/applications/` directory  
- Never create git repo in root `/resumagic/` directory
- Use descriptive commit messages with `feat:` prefix for new features

## Documentation
- Architecture: `docs/architecture-overview.md`
- API Reference: `services/keyword-analysis/API.md`
- Setup: `services/keyword-analysis/SETUP.md`
- Cover Letter Schema: `docs/cover-letter-schema.md`